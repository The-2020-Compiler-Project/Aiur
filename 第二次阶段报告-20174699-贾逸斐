中间代码序列是高级程序语言程序的等价程序，它介于源语言和目标语言之间。设置中间代码的目的是便于编译的后期优化和生成机器代码。本次设计采用四元式作为中间代码，因为与四元式相比较而言，逆波兰式用于能够清晰的表示语法最终的结果，但是由于最终结果单一不利于用来做程序设计，而三元式又不能清晰的描述操作结果的存地址，所以本次语法分析中采用的四元式形式。
四元式结构体：
struct QAT{
     string operate;
     string first;
     string second;
     string result;
     int    actm1;
     int    actm2;
     int    actm3;
};
其中，operate表示四元式的算符；
      first表示第一个操作数；
      second表示第二个操作数；
      result表示四元式运算结果；
      act1表示第一个操作数的活跃信息；
      act2表示第二个操作数的活跃信息；
      act3表示运算结果的活跃信息。
（2）vector<QAT>   FY
      用vector容器存放生成的四元式序列。
      （3）stack<string> Cate
            定义一个string类型的栈，用来存放声明语句中变量的类型。
      （4）stack<string> SEM
            定义一个string类型的栈，用来保存在生成四元式时所需的变量信息。
       (5) 符号表中存储每个变量信息的结构体：
           struct Fnode{
                     string defin;        //变量的名称
                     TYPELnode *cat;      //类型表节点指针
                     string typ;         //变量的种类
                     int  actm;          //变量的活跃信息
                     int offset;         //变量在内存中的地址偏移量
};
     （6）存储变量类型信息的结构体：
              struct TYPELnode{
                    string cate;        //类型的名称
                    AINFLnode *s;       //数组表节点指针
};
     （7）存储数组类型变量信息的结构体：
            struct AINFLnode{
                 int  fir;             //数组的上界
                 int  last;            //数组的下界
                 TYPELnode* catg;      //类型表节点的指针
                 int length;           //成分类型数据所占值单元的个数
};
      （10）vector<Fnode> FHB
             用vector容器存放符号表中的各项信息。
      （11）vector<TYPELnode>TYPE
             用vector容器存放类型表中的各项信息。
      （12）vector<AINFLnode>AINF;
             用vector容器存放数组表中的各项信息。
